#!/usr/bin/env julia

# works in that command:
# echo "[\"~#'\",\"~zNaN\"][\"~#'\",\"~zNaN\"]"  && echo "[\"~#'\",\"~zNaN\"] [\"~#'\",\"~zNaN\"]" | bin/read-write && echo
# returns ["~#'","~zNaN"]["~#'","~zNaN"]
# but this while True loop  should lazily realize values from the IO stream,
# with a generator or callback on IO or something.

include("../src/Transit.jl")
import Transit

e = Transit.Encoder(STDOUT, false)

function read_loop()
    while !eof(STDIN)
        produce(Transit.parse(STDIN))
    end
end

function write_loop(reader::Task)
    for parsed in reader
        if parsed != nothing
            Transit.write(STDOUT, parsed)
            flush(STDOUT)
        end
    end
end

@sync begin
    a = @async read_loop()
    @async write_loop(a)
end
